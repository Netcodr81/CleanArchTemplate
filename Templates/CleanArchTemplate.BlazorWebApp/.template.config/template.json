{
    "$schema": "http://json.schemastore.org/template",
    "author": "Mike Eckel",
    "classifications": [
        "Web",
        "Blazor",
        "Clean Architecture"
    ],
    "identity": "CleanArchTemplate.BlazorWebApp.CSharp",
    "name": "Clean Architecture Template - Blazor Web App",
    "shortName": "cleanarch-blazorwebapp",
    "description": "A template for creating a Clean Architecture solution for a Blazor Web App.",
    "defaultName": "CleanArchTemplate.BlazorWebApp",
    "tags": {
        "language": "C#",
        "type": "solution"
    },
    "guids": [
        "CB38F49B-9A25-4897-BCB6-6AF4E40D4096",
        "57014501-EC2B-43E6-A685-A24F92E7E9FB",
        "D24745A0-3161-4B10-B19F-7DBC0B9E5C7C",
        "81459D3A-7131-4690-AA00-9A2133EC3FC7",
        "80D1407D-7D38-4369-B0CF-EFC87DBEEB88",
        "3AABABC0-1525-4191-B24E-284C1D9C9166"
    ],
    "sourceName": "CleanArchTemplate.BlazorWebApp",
    "preferNameDirectory": true,
    "sources": [
        {
            "source": "./",
            "target": "./",
            "modifiers": [
                {
                    "exclude": [
                        ".template.config/**/*",
                        ".vs/**",
                        ".cr/**",
                        ".github/**",
                        ".gitignore",
                        ".git/**"
                    ]
                },
                {
                    "condition": "(!SampleContent)",
                    "exclude": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Pages/Auth.*",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Pages/Counter.*",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Pages/Weather.*",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Layout/NavMenu.*",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/wwwroot/bootstrap/**",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/wwwroot/favicon.*",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web.Client/Pages/**",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web.Client/wwwroot/**"
                    ]
                },
                {
                    "condition": "(!(UseServer && !UseWebAssembly))",
                    "exclude": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Pages/Counter.razor"
                    ]
                },
                {
                    "condition": "UseServer",
                    "exclude": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web.Client/**/*"
                    ]
                },
                {
                    "condition": "(!IndividualLocalAuth)",
                    "exclude": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Account/**",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Data/**",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web.Client/PersistentAuthenticationStateProvider.cs",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web.Client/UserInfo.cs",
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web.Client/Pages/Auth.razor"
                    ]
                },
                {
                    "condition": "(!(IndividualLocalAuth && !UseWebAssembly))",
                    "exclude": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Pages/Auth.razor"
                    ]
                },
                {
                    "condition": "(!(IndividualLocalAuth && UseServer && UseWebAssembly))",
                    "exclude": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Account/PersistingRevalidatingAuthenticationStateProvider.cs"
                    ]
                },
                {
                    "condition": "(!(IndividualLocalAuth && UseServer && !UseWebAssembly))",
                    "exclude": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Account/IdentityRevalidatingAuthenticationStateProvider.cs"
                    ]
                },
                {
                    "condition": "(!(IndividualLocalAuth && !UseServer && UseWebAssembly))",
                    "exclude": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Components/Account/PersistingServerAuthenticationStateProvider.cs"
                    ]
                },
                {
                    "condition": "(IndividualLocalAuth && UseWebAssembly)",
                    "include": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Data/**/*"
                    ]
                },
                {
                    "condition": "(IndividualLocalAuth && !UseWebAssembly)",
                    "include": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Data/**/*"
                    ]
                },
                {
                    "condition": "(IndividualLocalAuth && UseWebAssembly)",
                    "include": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Data/**/*"
                    ]
                },
                {
                    "condition": "(IndividualLocalAuth && !UseWebAssembly)",
                    "include": [
                        "src/Presentation/CleanArchTemplate.BlazorWebApp.Web/Data/**/*"
                    ]
                }
            ]
        }
    ],
    "symbols": {
        "Framework": {
            "type": "parameter",
            "description": "The target framework for the project.",
            "datatype": "choice",
            "choices": [
                {
                    "choice": "net8.0",
                    "description": "Target .NET 8"
                }
            ],
            "defaultValue": "net8.0",
            "replaces": "{{dotnetFrameworkVersion}}"
        },
        "HostIdentifier": {
            "type": "bind",
            "binding": "HostIdentifier"
        },
        "CreateSolutionDirectory": {
            "type": "parameter",
            "description": "Create a directory for the solution.",
            "datatype": "bool",
            "defaultValue": "true"
        },
        "InteractivityPlatform": {
            "type": "parameter",
            "datatype": "choice",
            "defaultValue": "Server",
            "displayName": "_Interactive render mode",
            "description": "Chooses which interactive render mode to use for interactive components",
            "choices": [
                {
                    "choice": "None",
                    "displayName": "None",
                    "description": "No interactivity (static server rendering only)"
                },
                {
                    "choice": "Server",
                    "displayName": "Server",
                    "description": "Runs on the server"
                },
                {
                    "choice": "WebAssembly",
                    "displayName": "WebAssembly",
                    "description": "Runs in the browser using WebAssembly"
                },
                {
                    "choice": "Auto",
                    "displayName": "Auto (Server and WebAssembly)",
                    "description": "Uses Server while downloading WebAssembly assets, then uses WebAssembly"
                }
            ]
        },
        "InteractivityLocation": {
            "type": "parameter",
            "datatype": "choice",
            "defaultValue": "InteractivePerPage",
            "displayName": "_Interactivity location",
            "description": "Chooses which components will have interactive rendering enabled",
            "isEnabled": "(InteractivityPlatform != \"None\")",
            "choices": [
                {
                    "choice": "InteractivePerPage",
                    "displayName": "Per page/component",
                    "description": "Interactivity is applied on a per-page or per-component basis"
                },
                {
                    "choice": "InteractiveGlobal",
                    "displayName": "Global",
                    "description": "Interactivity is applied at the root level"
                }
            ]
        },
        "Authorization": {
            "type": "parameter",
            "datatype": "choice",
            "choices": [
                {
                    "choice": "None",
                    "description": "None"
                },
                {
                    "choice": "Individual",
                    "description": "Individual Accounts"
                }
            ],
            "defaultValue": "None",
            "isEnabled": "true"
        },
        "IncludeClientApp": {
            "type": "computed",
            "value": "(InteractivityPlatform != \"WebAssembly\" || InteractivityPlatform != \"Auto\" || InteractivityPlatform != \"None\")"
        },
        "UseWebAssembly": {
            "type": "computed",
            "value": "(InteractivityPlatform == \"WebAssembly\" || InteractivityPlatform == \"Auto\")"
        },
        "UseServer": {
            "type": "computed",
            "value": "(InteractivityPlatform == \"Server\" || InteractivityPlatform == \"Auto\")"
        },
        "UseAuto": {
            "type": "computed",
            "value": "(InteractivityPlatform == \"Auto\")"
        },
        "IncludeSampleContent": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "true",
            "displayName": "_Include sample pages",
            "description": "Configures whether to add sample pages and styling to demonstrate basic usage patterns."
        },
        "SampleContent": {
            "type": "computed",
            "value": "(IncludeSampleContent)"
        },
        "InteractiveAtRoot": {
            "type": "computed",
            "value": "(InteractivityLocation == \"InteractiveGlobal\")"
        },
        "IndividualLocalAuth": {
            "type": "computed",
            "value": "(Authorization == \"Individual\")"
        }
    }
}